package com.cisco.virusHunter;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;

public class MalwareBazaarAPI {
    private static final String API_URL = "https://mb-api.abuse.ch/api/v1/";
    private String apiKey;
    private Set<String> virusHashes;

    public MalwareBazaarAPI(String apiKey) {
        this.apiKey = apiKey;
        this.virusHashes = new HashSet<>();
    }

    public void downloadVirusHashes() {
        try {
            URL url = new URL(API_URL);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            conn.setDoOutput(true);

            String postData = "query=get_recent&selector=100&api_key=" + apiKey;
            try (OutputStream os = conn.getOutputStream()) {
                byte[] input = postData.getBytes("utf-8");
                os.write(input, 0, input.length);
            }

            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"))) {
                StringBuilder response = new StringBuilder();
                String responseLine;
                while ((responseLine = br.readLine()) != null) {
                    response.append(responseLine.trim());
                }

                System.out.println("API Response: " + response.toString());

                JSONObject jsonResponse = new JSONObject(response.toString());

                if (jsonResponse.has("data") && !jsonResponse.isNull("data")) {
                    JSONArray dataArray = jsonResponse.getJSONArray("data");
                    for (int i = 0; i < dataArray.length(); i++) {
                        JSONObject item = dataArray.getJSONObject(i);
                        if (item.has("sha256_hash")) {
                            virusHashes.add(item.getString("sha256_hash").toLowerCase());
                        }
                    }
                    System.out.println("Downloaded " + virusHashes.size() + " virus hashes.");
                    
                    // هنا تأكد من كتابة التواقيع في الملف
                    writeHashesToFile("signatures.txt");
                } else {
                    System.err.println("Error: 'data' field not found or is null in the response.");
                    System.err.println("Full response: " + jsonResponse.toString());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // كتابة التواقيع إلى ملف signatures.txt
    public void writeHashesToFile(String filePath) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            for (String hash : virusHashes) {
                writer.write(hash);
                writer.newLine();
            }
            System.out.println("Hashes written to " + filePath);
        } catch (Exception e) {
            System.err.println("Error writing hashes to file: " + e.getMessage());
        }
    }

    public boolean isVirusHash(String hash) {
        return virusHashes.contains(hash.toLowerCase());
    }

    public int getHashCount() {
        return virusHashes.size();
    }
}
